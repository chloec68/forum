

1 - l'utilisateur arrive sur la page d'acceuil : 

Le HomeController est appelé pour récupérer les données nécessaires et afficher la vue correspondante (via la méthode index() qui retourne la vue home.php ) ;

2 - l'utilisateur clique sur "categories" : 

Le ForumController est appelé pour récupérer les données nécessaires et afficher la vue via la méthode index() de ce Controller ; 
La méthode index() du ForumController récupère la liste des catégories et les affiche dans la vue (listCategories.php)

3 - l'utilisateur clique sur un nom de catégorie : 

La méthode listTopicsByCategory($id) du ForumController est appelée ; 
( ... )

4- l'utilisateur décide de créer un nouveau topic et ajoute un titre dans le champ, puis il clique sur submit ; 

Une requête POST est envoyée à l'action/la méthode createTopic() du ForumController 
Cette méthode filtre et valide les données du formulaire ; 
Puis elle appelle des méthodes (notamment add) du TopicManager
(Le TopicManager ne comprend pas de méthode add, mais hérite des méthodes du Manager qui la comprend).

5- La méthode add() du Manager s'occupe de la logique métier = s'occupe de tout ce qui concerne la mise à jour de la BDD = elle prépare et exécute la requête SQL (via le DAO)




CONTROLLER => SOUS-MANAGER => MANAGER  







Formulaire HTML et méthode POST :

Lorsqu'un utilisateur remplit un formulaire HTML et clique sur le bouton d'envoi (par exemple, un bouton "Soumettre"),
un requête HTTP est envoyée au serveur. Cette requête peut être envoyée en utilisant différentes méthodes HTTP, dont la méthode POST.

La méthode POST :
La méthode POST est l'une des méthodes HTTP utilisées pour envoyer des données du client (navigateur de l'utilisateur) au serveur.
Les données sont envoyées dans le corps de la requête, et non dans l'URL, ce qui les rend plus sécurisées et plus adaptées aux données volumineuses
ou sensibles (comme des mots de passe).

Sur le serveur, vous pouvez récupérer ces données envoyées via la méthode POST à l'aide de la superglobale $_POST en PHP,
qui contient un tableau associatif avec les données envoyées.






$row = ["id" => 1, "title" => "whatever"] ; 
$class = 'Topic' ; 

protected function getOneOrNullResult($row, $class){ 
    if($row != null){
        return new $class($row);
    }
    return false;
} 

RETOURNE : 

class Topic {
    public $id;
    public $title;

    public function __construct($data) {
        $this->id = $data['id'];
        $this->title = $data['title'];
    }
}














***************************************************************Hash_v1.1

mot de passe haché : c'est crypté/encodé grâce à une chaîne de caractère ; le but est que le mdp ne soit pas stocké en clair, tel qu'on l'a saisi, dans la
base de données ; 
si un site nous renvoie le mdp tel qu'on l'a tapé, le site n'est pas sécurisé : les mdp sont stockés d'une manière non-conforme au RGPD; 

Il existe des algorithmes de hachage/cryptage : 
- hachage dit "faible" : sha1, sha256, md5 => méthodes de cryptage utilisables, mais ne peuvent pas être utilisés dans le cadre d'un hachage de mdp ; 
- hachage dit "fort" : bcrypt, argon2i


Failles de sécurité d'une applicatio web : 
-faille XSS 
-injection SQL 
-attaque par force brute => tentative de forçage à l'aide d'algorithme pour deviner le mdp (sans se baser sur une base existante)
-faille CRCF (on s'en prémunit par un système de jetons "tokens")
-attaque par dictionnaire =>se base sur un dictionnaire qui recense tous les mdp les plus courants  


La CNIL recommande 12 caractères pour un mot de passe avec majuscules, minuscules et caractères spéciaux ; voir doc CNIL (anthropie)

Comment faire pour imposer un mdp avec majuscules et caractères spéciaux ? => REGEX ;

<?php 

******algorithme de hachage faible 
$password = "monMotDePasse1234"; =>Mdp en clair 
$md5 = hash('md5',$password); fonction native hash() qui attend 2 arugments : une chaîne de caractère (nom de l'algorithme de hachage) + l'élément à hacher
echo $md5 => affiche mdp haché ; 
si on actualise la page, le mdp affiché ne change pas => le hachage reste le même ; 
si on crée une varaible $md5_2 qui contient exactement le même mdp, le résultat du hachage serait exactement le même ; 
même test avec l'algorithme 'sha256' => même résultat, si ce n'est que la chaîne de caractère de retour est un peu plus longue ; mais pas de regénération
en cas de refresh de la page et le résultat du hachage reste le même si le mdp est identique 

******algorithme de hachage fort 
empreinte numérique : ce qui est stocké en BDD (pas seulement la partie hachée d'un mdp) ; l'empreinte de compose : 
- l'algorithme lui-même : la version de l'algorithme utilisé (préfixe symbolisant la version) 
- le cost (coût) : permet de contrer les tentatives de piratage 
- d'un Salt = chaîne de caractère aléatoire ajoutée à l'avant du mdp hâché 
- du mdp hâché 

précision : peu importe la longueur du mdp saisi par l'utilisateur, ça ne va pas avoir d'influence sur la longueur totale de l'empreinte numérique
ou du mot de passe hâché ; 
précision : dans la BDD, le mdp est toujours une chaîne de caractères d'une longueur de 255 caractères ; 
précision : selon l'algorithme, un pepper est ajouté à l'empreinte numérique ; 

fonction native password_hash : voir doc => PASSWORD_DEFAULT,PASSWORD_BCRYPT,PASSWORD_ARGON2I,PASSWORD_ARGON2ID ;

$hash = password_hash(password en clair,algorithme,options:salt,cost,...)
$hash = password_hash($password,PASSWORD_DEFAULT); 
$hash2 = password_hash($password2,PASSWORD_DEFAULT); 
echo $hash; // empreinte numérique qui change aléatoirement à chaque refresh 
echo $hash2 // empreinte numérique différente à mdp identiques ; 

précision : on hache le mdp avant l'enregistrement en bdd ; 

********correspondance hachage et mdp en clair 
password_verify(user's password,hash created by password_hash()) => vérifie qu'un mot de passe corresponde à un hachache ;
$saisie = "monMotDePasse1234";
$hash =  password_hash($saisie,PASSWORD_DEFAULT); 

précision : dans le formulaire en front : <input type="password"> (lire doc); cet attribut n'est pas sécurisé => dans un form, clique droit "inspecter" et 
on peut le modifier ; tout comme un paramètre "required", etc ; le front n'est pas sécurisé puisqu'il est public et modifiable via l'inspecteur ; 
ce n'est pas de la sécurité, c'est un confort visuel ; pas de principe de sécurité en front ; 

$check = password_verify($saisie,$hash); // return un booleen => true si correspondance, false sinon ; 

if(password_verify($saisie,$hash)){
    echo "Les mdp correspondent";
}else{
    echo "Les mdp ne correspondent pas";
}

dans le projet, la condition à mettre en place : 
formulaire d'inscription : 1er mot de passe + confirmation du mot de passe ; 
connexion : inupt mail + input password ; mise en place d'une condition, si le mdp est vérifié, l'objet user est stocké en session $_SESSION 
(pour considérer l'utilisateur connecté) 

                if(password_verify($saisie,$hash)){
                    $_SESSION['user'] = $user; 
                }else{
                    echo "mdp ne correspondent pas";
                }

                Fichier Session.php => methode setUser() premet la mise en session de l'utilisateur ; 

Pour le logout => unset($_SESSION['user]); 

1. Créer forms avec input type="password" ; 
2. Hacher le mdp (hachage fort) et l'envoyer haché en BDD; password_hash()
3. Mise en place d'un système de correspondance hachage/mdp en clair renseigné par l'user à la connexion ; password_verify()

Dans SecurityController.php : 
Pour le register : 
- on filtre les champs du formulaire : filter_input pour lutter contre la faille XSS 
- si les filtres sont valides (if), on vérifie que le mail n'existe pas déjà (sinon message d'erreur) : en BDD on pourrait rendre le champ email du user "unique" par exemple => index de clé unique (rouge) 
- on vérifie que le pseudo n'existe pas non plus (sinon message d'erreur) : idem;
- on vérifié que les deux mots de passes du formulaire soient identiques : simple comparaison de chaînes de caractères en clair (if $password1 = $password2)
- si c'est le cas, on hash le mdp (password_hash())
-on ajoute l'utilisateur en BDD 

Pour le login : 
- on filtre les champs du formulaire (email + mdp): filter_input pour se prémunir de la faille XSS + adapter les input et les filter input 
- si les filtres passent, on retrouve le password correspondant au mail entré dans le formulaire 
- si on le trouve, on récuère le hash de la BDD 
- on retrouve l'utilisateur correspondant 
- on vérifie le mdp (password_verify())
- si on arrive à se connecter, on fait passer le user en session 
- si aucune des conditions ne passent (mauvais mot de passe, utilisateur inexistant, etc) -> message d'erreur 



$message = "mot de passe ou nom utilisateur inccorrect " => ne pas être trop précis par mesure de sécurité ; 



*************************************************************** Register_v1_1

register.php 
<h1>Sign Up</h1>
<form action="index.php?ctrl=security&action=register" method="post">
    <label for="pseudo>Pseudo</label>
    <input type="text" name="pseudo" id="pseudo"><br>

    <label for="email">Mail</label>
    <input type="email" name="email" id="email"><br>

    <label for="pass1">Mot de passe</label>
    <input type="password" name="pass1" id="pass1"><br>

    <label for="pass2">Confirmation du mot de passe</label>
    <input type="password" name="pass2" id="pass2"><br>

    <input type="submit" value="Sign Up"> 
</form>

=> méthode : post // pas get pour que les variables ne soient pas visibles dans l'URL 
=> en soumettant formulaire on passe dans 
=> pour déclencher une action, tout passe par l'url
=> dans 1ère appli.php, dans le fichier traitement on avait un switchcase : ici pareil, on fait un switch pour traiter les actions register et login : 




login.php 
<h1>Sign Up</h1>
<form action="index.php?ctrl=security&action=login" method="post">
 
    <label for="email">Mail</label>
    <input type="email" name="email" id="email"><br>

    <label for="pass">Mot de passe</label>
    <input type="password" name="pass1" id="pass1"><br>

    <input type="submit" value="Sign In"> 
</form>



if(isset($_GET["action"])){

    switch($_GET["action"]){
        case "register":
            if($_POST["submit"]){
                //connexion à la BDD
                $pdo->new PDO("mysql:host=localhost;dbname=whatever;charset=utf8","root", "");
                // filtrage des champs 
                $pseudo = filter_input(INPUT_POST,"pseudo",FILTER_SANITIZE_FULL_SPECIAL_CHARS);
                $mail = filter_input(INPUT_POST,"email",FILTER_SANITIZE_FULL_SPECIAL_CHARS, FILTER_VALIDATE_EMAIL); // on peut appliquer 2 filtres ici
                $pass1 = filter_input(INPUT_POST,"pass1",FILTER_SANITIZE_FULL_SPECIAL_CHARS);
                $pass2 = filter_input(INPUT_POST,"pass2",FILTER_SANITIZE_FULL_SPECIAL_CHARS);
                // vérification validité des filtres 
                if($pseudo && $email && pass1 && pass2){
                    //var_dump("ok");die; 
                    $requete = $pdo->prepare("SELECT * FROM user WHERE email = :email");
                    $requete -> execute(["email"=>$email]);
                    $user = $requete->fetch(); // je stocke le résultat de la requête dans $user s'il y en a un; 
                        //si l'utilisateur existe
                        if($user){
                            header("Location : register.php"); exit; // method redirectTo()
                        }else{//si l'utilisateur n'a pas été retrouvé
                            //var_dump("utilisateur inexistant"); 
                            //insertion de l'user en BDD 
                            if($pass1==$pass2 && strlen(pass1)>=12){
                                $insertUser = $pdo->prepare("INSERT INTO user (nickname,email,password) VALUES (:pseudo,:email,:password)"); // ici on utiliser add()
                                $insertUser->execute([
                                    "pseudo"=>$pseudo,
                                    "email"=>$email,
                                    "password"=>password_hash($pass1,PASSWORD_DEFAULT)
                                ]);
                            header("Location: login.php"); exit;
                            }else{
                                echo $message = "passwords don't match, password too short, etc.";
                            }
                        }
                     }else{ //prepare pour lutter contre l'injection SQL
                        $message = "problème de saisie dans le champ du formulaire" ; 
                    }
            }

            header("Location: register.php"); exit;

        break;
    }

}
        


*************************************************************** Login_v1_1

But :
- écrire "accueil" quand la personne n'est pas connectée 
- "Accueil + nom pseudo" quand personne connectée 
Adapter navbar
-> si on est connecté => lien se déconnecter 
-> si on est pas connecté => deux liens : se connecter + s'inscrire 

Qu'est-ce qui permet de savoir si un user est connecté => si il y a un user en session => if empty($_SESSION['user']);

Précision : rajout "name" dans <input type="submit"> pour pouvoir vérifier que le formulaire est soumis 


case "login": 

    if($_POST['submit]){
        $pdo->new PDO("mysql:host=localhost;dbname=whatever;charset=utf8","root", "");
        // POUR LUTTER CONTRE LA FAILLE XSS /!\
        $email = filter_input(INPUT_POST,"email",FILTER_SANITIZE_FULL_SPECIAL_CHARS, FILTER_VALIDATE_EMAIL);
        $password = filter_input(INPUT_POST,"pass1",FILTER_SANITIZE_FULL_SPECIAL_CHARS);

        if($email && $password){
            // POUR LUTTER CONTRE LA FAILLE SQL /!\
            $requete = $pdo->prepare("SELECT * FROM user WHERE user.email = :email");
            $requete->execute(["email"=>$email]);
            $user = $requete->fetch();
            //var_dump($user);die;
            // rappel : la $requete renvoie soit un tableau de données, soit "false" en l'absence de donner à renvoyer
            if($user){ //si l'utilisateur existe 
                $hash = $user['password'];
                if(password_verify($password, $hash)){ //rappel : renvoie un booléen ;
                    $_SESSION["user"]=$user; //on stocke en session l'intégralité des infos du user;
                    header("Location: index.php?ctrl=home&action=index"); //pas de redirection vers une vue, même si page statique : "principe de routage, toujours passer par l'URL";
                } else {
                    header("Location: index.php?ctrl=security&action=login");
                    $message = "utilisateur inconnu ou mot de passe incorrect" ; 
                }
            }else{
                $message = "mot de passe inccorrect ou utilisateur inconnu ";
                header("Location : index.php?ctrl=security&action=login");
            }
        }
    }

    header("Location : login.php");exit;
break;



DANS LA VUE (ACCUEIL): 
<?php
if(isset($_SESSION['user'])){            //rappel : isset()=>returns true if $var exists and has any value other than null; false otherwise; 
?>
    <a href="index.php?ctrl=security&action=logout">Se déconnecter</a>
<?php }else{ ?>
    <a href="index.php?ctrl=security&action=login">Se connecter</a>
    <a href="index.php?ctrl=security&action=register">S'inscrire</a>
<?php } ?> 

<h1>ACCUEIL</h1>
<?php if(isset($_SESSION['user'])){ ?>
    $message = "Bienvenue $user->getUsername()"; (VMC)
    echo "<p>Bienvenu " . $_SESSION['user']['username] . "</p>; (APPLI)
<?php } ?>


*************************
DANS LA VUE (PROFIL UTILISATEUR): N'EXISTE QUE SI L'UTILISATEUR EST CONNECTE 
<h1>Mon profil</h1>
<?php 
    if(isset($_SESSION['user'])){
        $infoSession = $_SESSION["user];
    }
?>

<p>Pseudo : <?= $infoSession["pseudo"] ?></p>
<p>Email : <?= $infoSession["email"] ?></p>
etc.





*************************

case "Logout":
    unset($_SESSION["user"]); => suppression du tableau user en session ; unset() => détruit la variable dont le nom a été passé en argument ; 
    header("Location : index.php?ctrl=home&action=index"); 
break;