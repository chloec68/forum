

1 - l'utilisateur arrive sur la page d'acceuil : 

Le HomeController est appelé pour récupérer les données nécessaires et afficher la vue correspondante (via la méthode index() qui retourne la vue home.php ) ;

2 - l'utilisateur clique sur "categories" : 

Le ForumController est appelé pour récupérer les données nécessaires et afficher la vue via la méthode index() de ce Controller ; 
La méthode index() du ForumController récupère la liste des catégories et les affiche dans la vue (listCategories.php)

3 - l'utilisateur clique sur un nom de catégorie : 

La méthode listTopicsByCategory($id) du ForumController est appelée ; 
( ... )

4- l'utilisateur décide de créer un nouveau topic et ajoute un titre dans le champ, puis il clique sur submit ; 

Une requête POST est envoyée à l'action/la méthode createTopic() du ForumController 
Cette méthode filtre et valide les données du formulaire ; 
Puis elle appelle des méthodes (notamment add) du TopicManager
(Le TopicManager ne comprend pas de méthode add, mais hérite des méthodes du Manager qui la comprend).

5- La méthode add() du Manager s'occupe de la logique métier = s'occupe de tout ce qui concerne la mise à jour de la BDD = elle prépare et exécute la requête SQL (via le DAO)




CONTROLLER => SOUS-MANAGER => MANAGER  







Formulaire HTML et méthode POST :

Lorsqu'un utilisateur remplit un formulaire HTML et clique sur le bouton d'envoi (par exemple, un bouton "Soumettre"),
un requête HTTP est envoyée au serveur. Cette requête peut être envoyée en utilisant différentes méthodes HTTP, dont la méthode POST.

La méthode POST :
La méthode POST est l'une des méthodes HTTP utilisées pour envoyer des données du client (navigateur de l'utilisateur) au serveur.
Les données sont envoyées dans le corps de la requête, et non dans l'URL, ce qui les rend plus sécurisées et plus adaptées aux données volumineuses
ou sensibles (comme des mots de passe).

Sur le serveur, vous pouvez récupérer ces données envoyées via la méthode POST à l'aide de la superglobale $_POST en PHP,
qui contient un tableau associatif avec les données envoyées.






$row = ["id" => 1, "title" => "whatever"] ; 
$class = 'Topic' ; 

protected function getOneOrNullResult($row, $class){ 
    if($row != null){
        return new $class($row);
    }
    return false;
} 

RETOURNE : 

class Topic {
    public $id;
    public $title;

    public function __construct($data) {
        $this->id = $data['id'];
        $this->title = $data['title'];
    }
}